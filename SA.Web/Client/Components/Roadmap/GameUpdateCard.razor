<div class="col-auto game-update-card @(Card == null ? string.Empty :
                         Card.Patches[0].EvocatiTestingDate != null && Card.Patches[0].PTUTestingStartDate != null && Card.Patches[0].PUReleaseDate == null ? "ptu" :
                         Card.Patches[0].EvocatiTestingDate != null && Card.Patches[0].PTUTestingStartDate == null && Card.Patches[0].PUReleaseDate == null ? "evocati" :
                         Card.Patches[0].EvocatiTestingDate == null && Card.Patches[0].PTUTestingStartDate == null && Card.Patches[0].PUReleaseDate == null ? "dev" : "released")">
    <GameUpdateCardHeader Card="Card" />
    <GameUpdateCardBody Card="Card" IsCollapsed="IsCollapsed" AvailableDates="AvailableDates" SelectedDate="SelectedDate" />
    <GameUpdateCardTools Card="Card" AvailableDates="AvailableDates" CollapseAllState="(val) => ToggleCollapse(val)" SelectedDateState="(val) => ChangeDate(val)" />
</div>

@code {

    [Parameter]
    public RoadmapCard Card { get; set; }

    public bool IsCollapsed { get; set; } = true;
    public DateTime SelectedDate { get; set; }

    public List<DateTime> AvailableDates { get; set; } = new List<DateTime>();

    protected override async Task OnInitializedAsync()
    {
        foreach (RoadmapFeature f in Card.VersionFeatures)
        {
            foreach (DateTime d in f.TaskCount.Keys.Concat(f.TasksCompleted.Keys))
            {
                if (!AvailableDates.Contains(d)) AvailableDates.Add(d);
            }
        }
        AvailableDates = AvailableDates.OrderBy(o => o.Date).Reverse().ToList();
        SelectedDate = AvailableDates[0];
        await base.OnInitializedAsync();
    }

    private void ToggleCollapse(bool isCollapsed)
    {
        IsCollapsed = isCollapsed;
        StateHasChanged();
    }

    private void ChangeDate(DateTime date)
    {
        SelectedDate = date;
        StateHasChanged();
    }
}
