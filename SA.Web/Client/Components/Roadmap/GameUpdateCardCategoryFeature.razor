<div class="col">
    <div class="row feature">
        <div class="col">
            @if (!NotAddedYet)
            {
                <div class="row">
                    <div class="col feature-img">
                        <img src="/img/roadmap/@(Feature.Category.ToString().ToLower()).webp" draggable="false" alt="Feature Image" />
                        <div class="task-overlay">
                            <small>
                                @(IsDataKnown ? "Tasks: " + (Status == RoadmapFeatureStatus.Released || Status == RoadmapFeatureStatus.Polishing ? TasksCompleted : TaskCount) + "/" + TasksCompleted + " | " + 
                                    (Progress < 100D ? Progress.ToString("0.00") + "% | " : string.Empty) +
                                        Regex.Replace(Feature.Status[Feature.Status.Keys.Where(x => x <= SelectedDate).Reverse().First()].ToString(), @"((?<=\p{Ll})\p{Lu})|((?!\A)\p{Lu}(?>\p{Ll}))", " $0") : 
                                            "Data Unknown | " + Regex.Replace(RoadmapFeatureStatus.Released.ToString(), @"((?<=\p{Ll})\p{Lu})|((?!\A)\p{Lu}(?>\p{Ll}))", " $0"))
                            </small>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="feature-progression">
                            <div class="bar" style="width: @(Progress * 3.9D + "px");" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col feature-description">
                        <small>@(Feature.Description)</small>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col d-flex align-items-center not-added">
                        <small>This feature wasnt added on or before @SelectedDate.ToShortDateString()</small>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@inject ClientState State

@code {

    [Parameter]
    public RoadmapCard Card { get; set; }

    [Parameter]
    public RoadmapFeature Feature { get; set; }

    [Parameter]
    public List<DateTime> AvailableDates { get; set; }

    [Parameter]
    public DateTime SelectedDate { get; set; }

    public bool NotAddedYet { get; set; } = false;

    public int TaskCount { get; set; } = 0;
    public int TasksCompleted { get; set; } = 0;
    public double Progress { get; set; } = 0;

    public RoadmapFeatureStatus Status;
    public bool IsDataKnown = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Status = Feature.Status[Feature.Status.Keys.Where(x => x <= SelectedDate).Reverse().First()];
            TaskCount = Feature.TaskCount[Feature.TaskCount.Keys.Where(x => x <= SelectedDate).Reverse().First()];
            TasksCompleted = Feature.TasksCompleted[Feature.TasksCompleted.Keys.Where(x => x <= SelectedDate).Reverse().First()];

            IsDataKnown = Status != RoadmapFeatureStatus.Scheduled && TaskCount > 0 && TasksCompleted > 0;

            Progress = Status == RoadmapFeatureStatus.InDevelopment ?
                100D * (double)TaskCount / (double)TasksCompleted : 
                IsDataKnown ? 100D : 0D;
        }
        catch (JSException)
        {
            NotAddedYet = true;
        }
        catch (InvalidOperationException)
        {
            NotAddedYet = true;
        }
        await base.OnInitializedAsync();
    }
}
